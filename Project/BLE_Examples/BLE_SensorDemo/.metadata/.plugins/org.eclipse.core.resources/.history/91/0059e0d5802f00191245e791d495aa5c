/*
 * SAM_Bluetooth.c
 *
 *  Created on: 11.02.2019
 *      Author: dinkelsv64505
 */

#include "SAM_Bluetooth.h"

#include <stdlib.h>

#include "bluenrg1_stack.h"
#include "ble_status.h"

#include "RuleProcess/RP_RuleChecker.h"
#include "Debug/DB_Assert.h"

void sam_bl_initLink();

void sam_bl_init()
{
	sam_bl_initLink();
}

void sam_bl_notifyEvent()
{
	db_cs_printString("Bluetooth Paket Received !\r");

	rp_rc_addSource(sam_bl_generateSource());
}

Source sam_bl_generateSource()
{
	db_cs_printString("Building Source...\r");

	Source blueSource;

	blueSource.sourceType = SOURCETYPE_BLUETOOTH;
	//blueSource.sourceID = //MAC

}

uint8_t sam_bl_initLink()
{

	uint8_t bdaddr[] =
	{ 0x12, 0x34, 0x00, 0xE1, 0x80, 0x02 };
	uint8_t ret;
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t device_name[] =
	{ 'B', 'l', 'u', 'e', 'N', 'R', 'G' };

	/* Set the device public address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
			CONFIG_DATA_PUBADDR_LEN, bdaddr);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_hal_write_config_data() failed");
		return ret;
	}

	/* Set the TX power -2 dBm */
	aci_hal_set_tx_power_level(1, 4);

	/* GATT Init */
	ret = aci_gatt_init();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gatt_init() failed");
		return ret;
	}

	/* GAP Init */
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle,
			&dev_name_char_handle, &appearance_char_handle);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gap_init() failed");
		return ret;
	}

	/* Update device name */
	ret = aci_gatt_update_char_value_ext(0, service_handle,
			dev_name_char_handle, 0, sizeof(device_name), 0,
			sizeof(device_name), device_name);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gatt_update_char_value_ext() failed");
		return ret;
	}

	ret = aci_gap_set_authentication_requirement(BONDING,
			MITM_PROTECTION_REQUIRED, SC_IS_NOT_SUPPORTED,
			KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING, 123456,
			0x00);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gap_set_authentication_requirement() failed");
		return ret;
	}

	db_cs_printString("BLE Stack Initialized with SUCCESS\r");

#ifndef SENSOR_EMULATION /* User Real sensors */
	Init_Accelerometer();
	Init_Pressure_Temperature_Sensor();
#endif

	/* Add ACC service and Characteristics */
	ret = Add_Acc_Service();
	if (ret == BLE_STATUS_SUCCESS)
	{
		db_cs_printString("Acceleration service added successfully\r");
	}
	else
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error while adding Acceleration service");
		return ret;
	}

	/* Add Environmental Sensor Service */
	ret = Add_Environmental_Sensor_Service();
	if (ret == BLE_STATUS_SUCCESS)
	{
		db_cs_printString("Environmental service added successfully\r");
	}
	else
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error while adding Environmental service");
		return ret;
	}

	return BLE_STATUS_SUCCESS;

}
