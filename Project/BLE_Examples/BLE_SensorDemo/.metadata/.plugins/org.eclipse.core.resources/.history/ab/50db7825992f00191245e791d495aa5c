/*
 * HW_Bluetooth.c
 *
 *  Created on: 13.02.2019
 *      Author: dinkelsv64505
 */

#include "HardwareUtil/HW_Bluetooth.h"
#include "HardwareUtil/HW_Bluetooth_Config.h"

#include "bluenrg1_stack.h"
#include "bluenrg1_api.h"
#include "ble_status.h"
#include "bluenrg1_hal.h"
#include "bluenrg1_gap.h"
#include "sm.h"

#include <stddef.h>

#include "Debug/DB_Console.h"
#include "Debug/DB_Assert.h"

/* This structure contains memory and low level hardware configuration data for the device */
const BlueNRG_Stack_Initialization_t BlueNRG_Stack_Init_params =
{ (uint8_t*) stacklib_flash_data,
FLASH_SEC_DB_SIZE,
FLASH_SERVER_DB_SIZE, (uint8_t*) stacklib_stored_device_id_data,
		(uint8_t*) dyn_alloc_a, TOTAL_BUFFER_SIZE(NUM_LINKS,
				NUM_GATT_ATTRIBUTES, NUM_GATT_SERVICES, ATT_VALUE_ARRAY_SIZE,
				MBLOCKS_COUNT, CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED),
		NUM_GATT_ATTRIBUTES,
		NUM_GATT_SERVICES,
		ATT_VALUE_ARRAY_SIZE,
		NUM_LINKS, 0, /* reserved for future use */
		PREPARE_WRITE_LIST_SIZE,
		MBLOCKS_COUNT,
		MAX_ATT_MTU,
		CONFIG_TABLE, };

uint8_t sam_bl_initLink();

void hw_bl_init()
{
	db_cs_printString("Init Bluetooth Stack...\r");

	uint8_t ret = BlueNRG_Stack_Initialization(&BlueNRG_Stack_Init_params);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error in BlueNRG_Stack_Initialization()");
		BLUETOOTH_ERR_FLAG = 1;
	}

	sam_bl_initLink();
}

uint8_t sam_bl_initLink()
{

	uint8_t bdaddr[] =
	{ 0x12, 0x34, 0x00, 0xE1, 0x80, 0x02 };
	uint8_t device_name[] =
	{ 'B', 'l', 'u', 'e', 'X', 'X', 'X' };

	uint8_t ret;
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	/* Set the device public address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
			CONFIG_DATA_PUBADDR_LEN, bdaddr);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_hal_write_config_data() failed");
		return ret;
	}

	/* Set the TX power -2 dBm */
	aci_hal_set_tx_power_level(1, 4);

	/* GATT Init */
	ret = aci_gatt_init();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gatt_init() failed");
		return ret;
	}

	/* GAP Init */
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle,
			&dev_name_char_handle, &appearance_char_handle);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gap_init() failed");
		char c = (char) ret;
		db_cs_printString(&c);
		return ret;
	}

	/* Update device name */
	ret = aci_gatt_update_char_value_ext(0, service_handle,
			dev_name_char_handle, 0, sizeof(device_name), 0,
			sizeof(device_name), device_name);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gatt_update_char_value_ext() failed");
		return ret;
	}

	ret = aci_gap_set_authentication_requirement(BONDING,
			MITM_PROTECTION_REQUIRED, SC_IS_NOT_SUPPORTED,
			KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING, 123456,
			0x00);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gap_set_authentication_requirement() failed");
		return ret;
	}

	ret = Add_Chat_Service();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "Error in Add_Chat_Service");
		return ret;
	}
	else
	{
		db_cs_printString("Add_Chat_Service() --> SUCCESS\r");
	}

	db_cs_printString("BLE Stack Initialized with SUCCESS\r");

	hw_bl_SetDeviceConnectable();

	/* Add ACC service and Characteristics */
//	ret = Add_Acc_Service();
//	if (ret == BLE_STATUS_SUCCESS)
//	{
//		db_cs_printString("Acceleration service added successfully\r");
//	}
//	else
//	{
//		db_as_assert(DB_AS_ERROR_BLUETOOTH,
//				"Error while adding Acceleration service");
//		return ret;
//	}
//
//	/* Add Environmental Sensor Service */
//	ret = Add_Environmental_Sensor_Service();
//	if (ret == BLE_STATUS_SUCCESS)
//	{
//		db_cs_printString("Environmental service added successfully\r");
//	}
//	else
//	{
//		db_as_assert(DB_AS_ERROR_BLUETOOTH,
//				"Error while adding Environmental service");
//		return ret;
//	}
	return BLE_STATUS_SUCCESS;

}

/*******************************************************************************
 * Function Name  : Set_DeviceConnectable.
 * Description    : Puts the device in connectable mode.
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void hw_bl_SetDeviceConnectable(void)
{
	uint8_t ret;
	uint8_t local_name[] =
	{ AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'l', 'u', 'e', 'X', 'X', 'X' };

#if ST_OTA_FIRMWARE_UPGRADE_SUPPORT
	hci_le_set_scan_response_data(18,BTLServiceUUID4Scan);
#else
	hci_le_set_scan_response_data(0, NULL);
#endif /* ST_OTA_FIRMWARE_UPGRADE_SUPPORT */
	db_cs_printString("Set General Discoverable Mode\r");

	ret = aci_gap_set_discoverable(ADV_IND, (ADV_INTERVAL_MIN_MS * 1000) / 625,
			(ADV_INTERVAL_MAX_MS * 1000) / 625, STATIC_RANDOM_ADDR,
			NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gap_set_discoverable() failed\r");
	}
	else
		db_cs_printString("aci_gap_set_discoverable() SUCCESS\r");
}

uint8_t Add_Chat_Service(void)
{
	uint8_t ret;

	/*
	 UUIDs:
	 D973F2E0-B19E-11E2-9E96-0800200C9A66
	 D973F2E1-B19E-11E2-9E96-0800200C9A66
	 D973F2E2-B19E-11E2-9E96-0800200C9A66
	 */

	const uint8_t uuid[16] =
	{ 0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1,
			0xe0, 0xf2, 0x73, 0xd9 };
	const uint8_t charUuidTX[16] =
	{ 0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1,
			0xe1, 0xf2, 0x73, 0xd9 };
	const uint8_t charUuidRX[16] =
	{ 0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1,
			0xe2, 0xf2, 0x73, 0xd9 };

	Osal_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
	ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 6,
			&chatServHandle);
	if (ret != BLE_STATUS_SUCCESS)
		goto fail;

	Osal_MemCpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
	ret = aci_gatt_add_char(chatServHandle, UUID_TYPE_128, &char_uuid, 20,
			CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &TXCharHandle);
	if (ret != BLE_STATUS_SUCCESS)
		goto fail;

	Osal_MemCpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
	ret = aci_gatt_add_char(chatServHandle, UUID_TYPE_128, &char_uuid, 20,
			CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
			ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 16, 1,
			&RXCharHandle);
	if (ret != BLE_STATUS_SUCCESS)
		goto fail;

	db_cs_printString("Chat Service added\r");
	return BLE_STATUS_SUCCESS;

	fail: db_as_assert(DB_AS_ERROR_BLUETOOTH,
			"Error while adding Chat service");
	return BLE_STATUS_ERROR;
}

/* ***************** BlueNRG-1 Stack Callbacks ********************************/

/*******************************************************************************
 * Function Name  : hci_le_connection_complete_event.
 * Description    : This event indicates that a new connection has been created.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_connection_complete_event(uint8_t Status,
		uint16_t Connection_Handle, uint8_t Role, uint8_t Peer_Address_Type,
		uint8_t Peer_Address[6], uint16_t Conn_Interval, uint16_t Conn_Latency,
		uint16_t Supervision_Timeout, uint8_t Master_Clock_Accuracy)

{
	db_cs_printString("CALLBACK 1\r");
}/* end hci_le_connection_complete_event() */

/*******************************************************************************
 * Function Name  : hci_disconnection_complete_event.
 * Description    : This event occurs when a connection is terminated.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
		uint16_t Connection_Handle, uint8_t Reason)
{
	db_cs_printString("CALLBACK 2\r");
}/* end hci_disconnection_complete_event() */

/*******************************************************************************
 * Function Name  : aci_gatt_attribute_modified_event.
 * Description    : This event occurs when an attribute is modified.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
		uint16_t Attr_Handle, uint16_t Offset, uint16_t Attr_Data_Length,
		uint8_t Attr_Data[])
{
	db_cs_printString("CALLBACK 3\r");
}

/*******************************************************************************
 * Function Name  : aci_gatt_notification_event.
 * Description    : This event occurs when a notification is received.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
		uint16_t Attribute_Handle, uint8_t Attribute_Value_Length,
		uint8_t Attribute_Value[])
{
	db_cs_printString("CALLBACK 4\r");
}

/*******************************************************************************
 * Function Name  : aci_gatt_disc_read_char_by_uuid_resp_event.
 * Description    : This event occurs when a discovery read characteristic by UUID response.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
		uint16_t Attribute_Handle, uint8_t Attribute_Value_Length,
		uint8_t Attribute_Value[])
{
	db_cs_printString("CALLBACK 5\r");
}

/*******************************************************************************
 * Function Name  : aci_gatt_proc_complete_event.
 * Description    : This event occurs when a GATT procedure complete is received.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
		uint8_t Error_Code)
{
	db_cs_printString("CALLBACK 6\r");
}

/*******************************************************************************
 * Function Name  : aci_gatt_tx_pool_available_event.
 * Description    : This event occurs when a TX pool available is received.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
		uint16_t Available_Buffers)
{
	db_cs_printString("CALLBACK 7\r");
}

/*******************************************************************************
 * Function Name  : aci_gatt_read_permit_req_event.
 * Description    : This event is given when a read request is received
 *                  by the server from the client.
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
		uint16_t Attribute_Handle, uint16_t Offset)
{
	db_cs_printString("CALLBACK 8\r");
}
