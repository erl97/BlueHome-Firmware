/*
 * HW_Bluetooth.c
 *
 *  Created on: 13.02.2019
 *      Author: dinkelsv64505
 */

#include "HardwareUtil/HW_Bluetooth_config.h"
#include "HardwareUtil/HW_Bluetooth.h"

#include "bluenrg1_stack.h"
#include "bluenrg1_api.h"
#include "bluenrg1_gatt_server.h"
#include "ble_status.h"
#include "bluenrg1_hal.h"
#include "bluenrg1_gap.h"
#include "sm.h"

#include <stddef.h>

#include "Debug/DB_Console.h"
#include "Debug/DB_Assert.h"

#include "Demo/gatt_db.h"

#define UPDATE_CONN_PARAM 0
#define  ADV_INTERVAL_MIN_MS  1000
#define  ADV_INTERVAL_MAX_MS  1200

uint8_t sam_bl_initLink();
uint8_t Add_Chat_Service(void);

uint8_t Services_Max_Attribute_Records[NUMBER_OF_APPLICATION_SERVICES] =
{ MAX_NUMBER_ATTRIBUTES_RECORDS_SERVICE_1,
		MAX_NUMBER_ATTRIBUTES_RECORDS_SERVICE_2 };

void hw_bl_init()
{
	db_cs_printString("Init Bluetooth Stack...\r");

	uint8_t ret = BlueNRG_Stack_Initialization(&BlueNRG_Stack_Init_params);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error in BlueNRG_Stack_Initialization()");
		BLUETOOTH_ERR_FLAG = 1;
	}

	sam_bl_initLink();
}

uint8_t sam_bl_initLink()
{

	uint8_t bdaddr[] =
	{ 0x12, 0x34, 0x00, 0xE1, 0x80, 0x02 };
	uint8_t device_name[] =
	{ 'B', 'l', 'u', 'e', 'X', 'X', 'X' };

	uint8_t ret;
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	/* Set the device public address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
	CONFIG_DATA_PUBADDR_LEN, bdaddr);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_hal_write_config_data() failed");
		return ret;
	}

	/* Set the TX power -2 dBm */
	aci_hal_set_tx_power_level(1, 4);

	/* GATT Init */
	ret = aci_gatt_init();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gatt_init() failed");
		return ret;
	}

	/* GAP Init */
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle,
			&dev_name_char_handle, &appearance_char_handle);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "aci_gap_init() failed");
		char c = (char) ret;
		db_cs_printString(&c);
		return ret;
	}

	/* Update device name */
	ret = aci_gatt_update_char_value_ext(0, service_handle,
			dev_name_char_handle, 0, sizeof(device_name), 0,
			sizeof(device_name), device_name);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gatt_update_char_value_ext() failed");
		return ret;
	}

	ret = aci_gap_set_authentication_requirement(BONDING,
	MITM_PROTECTION_REQUIRED, SC_IS_NOT_SUPPORTED,
	KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING, 123456, 0x00);
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"aci_gap_set_authentication_requirement() failed");
		return ret;
	}

	ret = Add_Acc_Service();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "Error in Add_Acc_Service");
		return ret;
	}
	else
	{
		db_cs_printString("Add_Acc_Service() --> SUCCESS\r");
	}

	/* Add Environmental Sensor Service */
	ret = Add_Environmental_Sensor_Service();
	if (ret != BLE_STATUS_SUCCESS)
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH, "Error in Add_Env_Service");
		return ret;
	}
	else
	{
		db_cs_printString("Add_Env_Service() --> SUCCESS\r");
	}

	db_cs_printString("BLE Stack Initialized with SUCCESS\r");

	hw_bl_SetDeviceConnectable();

	/* Add ACC service and Characteristics */
	ret = Add_Acc_Service();
	if (ret == BLE_STATUS_SUCCESS)
	{
		db_cs_printString("Acceleration service added successfully\r");
	}
	else
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error while adding Acceleration service");
		return ret;
	}

	/* Add Environmental Sensor Service */
	ret = Add_Environmental_Sensor_Service();
	if (ret == BLE_STATUS_SUCCESS)
	{
		db_cs_printString("Environmental service added successfully\r");
	}
	else
	{
		db_as_assert(DB_AS_ERROR_BLUETOOTH,
				"Error while adding Environmental service");
		return ret;
	}
	return BLE_STATUS_SUCCESS;

}

/*******************************************************************************
 * Function Name  : Set_DeviceConnectable.
 * Description    : Puts the device in connectable mode.
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
//void hw_bl_SetDeviceConnectable(void)
//{
//	uint8_t ret;
//	uint8_t local_name[] =
//	{ AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'l', 'u', 'e', 'X', 'X', 'X' };
//
//#if ST_OTA_FIRMWARE_UPGRADE_SUPPORT
//	hci_le_set_scan_response_data(18,BTLServiceUUID4Scan);
//#else
//	hci_le_set_scan_response_data(0, NULL);
//#endif /* ST_OTA_FIRMWARE_UPGRADE_SUPPORT */
//	db_cs_printString("Set General Discoverable Mode\r");
//
//	ret = aci_gap_set_discoverable(ADV_IND, (ADV_INTERVAL_MIN_MS * 1000) / 625,
//			(ADV_INTERVAL_MAX_MS * 1000) / 625, STATIC_RANDOM_ADDR,
//			NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
//	if (ret != BLE_STATUS_SUCCESS)
//	{
//		db_as_assert(DB_AS_ERROR_BLUETOOTH,
//				"aci_gap_set_discoverable() failed\r");
//	}
//	else
//		db_cs_printString("aci_gap_set_discoverable() SUCCESS\r");
//}
